description: Endpoints Collation Service
prerequisites:
  - base-instance-profile
parts:

  - name: Endpoints Collation service instance
    description: Starts an instance of the Endpoints Collation service
    handler: cloudformation
    updateMethod: update
    task:
      stackName: $(endpoints-collation-stack-name)
      amiLookups:
        - name: endpoints-collation-service-$(endpoints-collation-service-version)
          var: endpoints-collation-service-ami
      base64Encode:
        - value:
            - '#!/bin/sh'
            -
            - 'sudo yum update -y -q'

            - 'cat << EOF > /home/ec2-user/config.json'
            - '{'
            - '  "endpoints": $(endpoints),'
            - '  "mustBeTrue": {'
            - '    "status": ['
            - '      200'
            - '    ],'
            - '    "body": ['
            - '      "//status/result[text()=''OK'']"'
            - '    ],'
            - '    "bodyJson": ['
            - '      "\$[?(@.result==''OK'')]"'
            - '     ]'
            - '  },'
            - '  "mustBeFalse": {'
            - '    "body": ['
            - '      "//status/resources/*[@result!=''OK'']"'
            - '    ],'
            - '    "bodyJson": ['
            - '      "\$..resources[?(@.result!=''OK'')]"'
            - '    ]'
            - '  }'
            - '}'
            - 'EOF'

            - cd /home/ec2-user/endpoints-collation-service/
            - npm install

            - sudo chown ec2-user /var/log/barossa

            - sudo sh /home/ec2-user/start-filebeat.sh --logstash $(logstash-name)
            - sudo sh /home/ec2-user/start-datadog-agent.sh --apikey $(data-dog-api-key)

            - export PORT=8080
            - export CONFIG_PATH=/home/ec2-user/config.json
            - export DEPLOYED_VERSION=$(endpoints-collation-service-version)
            - export DEPLOYED_ENVIRONMENT=$(instanceId)
            - forever start -a -l /var/log/barossa/forever.log -o /var/log/barossa/app.log -e /var/log/barossa/error.log /home/ec2-user/endpoints-collation-service/src/server.js
            - sudo python3 /opt/common/wait_and_signal_success.py/wait_and_signal_success.py --stack $(endpoints-collation-stack-name) --resource AutoScalingGroup --region $(region) --port $(endpoints-collation-service-port) --endpoint statuscheck

          var: base64encoded-endpoints-collation-user-data
      templateBody:
        AWSTemplateFormatVersion: "2010-09-09"
        Resources:
          SecurityGroup:
            Type: AWS::EC2::SecurityGroup
            Properties:
              GroupDescription: $(endpoints-collation-stack-name)-security-group
              VpcId: $(vpc)
              SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: "$(endpoints-collation-service-port)"
                  ToPort: "$(endpoints-collation-service-port)"
                  CidrIp: "0.0.0.0/0"
              Tags:
                - Key: security-scan:ignore-public-ip
                  Value: $(endpoint-collation-security-scan-ignore-public-ip)

          ElasticLoadBalancerSecurityGroup:
            Type: AWS::EC2::SecurityGroup
            Properties:
              GroupDescription: $(endpoints-collation-stack-name)-elb-security-group
              VpcId: $(vpc)
              SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: "80"
                ToPort: "80"
                CidrIp: "0.0.0.0/0"
          ElasticLoadBalancer:
            Type: AWS::ElasticLoadBalancing::LoadBalancer
            Properties:
              CrossZone: True
              HealthCheck:
                HealthyThreshold: 2
                Interval: 10
                Target: HTTP:$(endpoints-collation-service-port)/result
                Timeout: 2
                UnhealthyThreshold: 2
              Listeners:
                - InstancePort: "$(endpoints-collation-service-port)"
                  InstanceProtocol: HTTP
                  LoadBalancerPort: "80"
                  Protocol: HTTP
              Scheme: $(endpoint-collation-load-balancer-scheme)
              SecurityGroups:
                - Ref: ElasticLoadBalancerSecurityGroup
              Subnets:
                - $(endpoint-collation-load-balancer-subnet-1)
                - $(endpoint-collation-load-balancer-subnet-2)
              Tags:
                - Key: DomainNames
                  Value: $(endpoints-collation-service-hostname).$(sub-domain).+
          LaunchConfiguration:
            Type: AWS::AutoScaling::LaunchConfiguration
            Properties:
              AssociatePublicIpAddress: False
              IamInstanceProfile: $(base-instance-profile)
              ImageId: $(endpoints-collation-service-ami)
              InstanceType: $(endpoints-collation-service-instance-type)
              SecurityGroups:
                - Ref: SecurityGroup
              UserData: $(base64encoded-endpoints-collation-user-data)
          AutoScalingGroup:
            Type: AWS::AutoScaling::AutoScalingGroup
            Properties:
              DesiredCapacity: "$(endpoints-collation-scaling-desired)"
              LaunchConfigurationName:
                Ref: LaunchConfiguration
              LoadBalancerNames:
                - Ref: ElasticLoadBalancer
              MaxSize: "$(endpoints-collation-scaling-max)"
              MinSize: "$(endpoints-collation-scaling-desired)"
              Tags:
                - Key: Name
                  Value: $(endpoints-collation-service-hostname)
                  PropagateAtLaunch: True
                - Key: Environment
                  Value: $(environment)
                  PropagateAtLaunch: True
              VPCZoneIdentifier:
                - $(private-subnet-a)
                - $(private-subnet-b)
            UpdatePolicy:
              AutoScalingRollingUpdate:
                MinInstancesInService: $(endpoints-collation-min-instances-in-service)
                MaxBatchSize: $(endpoints-collation-scaling-max-batch-size)
                PauseTime: PT20M
                SuspendProcesses:
                  - AlarmNotification
                WaitOnResourceSignals: true

          HighCPUAlarm:
            Type: AWS::CloudWatch::Alarm
            Properties:
              AlarmDescription: Alarm if CPU > 80% for $(high-cpu-alarm-period) seconds
              MetricName: CPUUtilization
              Namespace: AWS/EC2
              Statistic: Average
              Period: $(high-cpu-alarm-period)
              EvaluationPeriods: "1"
              Threshold: "80"
              AlarmActions:
                - $(sns-topic-alarms)
              Dimensions:
                - Name: AutoScalingGroupName
                  Value:
                    Ref: AutoScalingGroup
              ComparisonOperator: GreaterThanThreshold
          LowCPUCreditAlarm:
            Type: AWS::CloudWatch::Alarm
            Properties:
              AlarmDescription: Alarm if CPU credits < 10 for 5 minutes
              MetricName: CPUCreditBalance
              Namespace: AWS/EC2
              Statistic: Minimum
              Period: "300"
              EvaluationPeriods: "1"
              Threshold: "10"
              AlarmActions:
                - $(sns-topic-alarms)
              Dimensions:
                - Name: AutoScalingGroupName
                  Value:
                    Ref: AutoScalingGroup
              ComparisonOperator: LessThanThreshold
        Outputs:
          DashboardBoxes:
            Description: Dashboard boxes
            Value: '[{
                      "check_command": "endpointCollationServiceCheck!Endpoints Collation Service Check!http://$(endpoints-collation-service-hostname).$(sub-domain).$(root-domain)/result",
                      "location": "$(instanceId)/Endpoints Collation Service/Status Check/RESULT"
                    },
                    {
                      "check_command": "serviceVersionInfo!Endpoints Collation Service Version!http://$(endpoints-collation-service-hostname).$(sub-domain).$(root-domain)/versioncheck",
                      "location": "$(instanceId)/Endpoints Collation Service/Version"
                    },
                    {
                      "check_command": "serviceStatusCheck!Endpoints Collation Service Status Check!http://$(endpoints-collation-service-hostname).$(sub-domain).$(root-domain)/statuscheck",
                      "location": "$(instanceId)/Endpoints Collation Service/Status Check/STATUS"
                    }]'